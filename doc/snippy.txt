*snippy.txt* Snippet plugin for neovim.

Snippy                                                                *snippy*

==============================================================================
CONTENTS                                                     *snippy-contents*

    INTRODUCTION.........................|snippy-introduction|
    USAGE................................|snippy-usage|
    SNIPPET SYNTAX.......................|snippy-snippet-syntax|
    OPTIONS..............................|snippy-options|
    BUFFER OPTIONS.......................|snippy-bufer-options|
    COMMANDS.............................|snippy-commands|
    FUNCTIONS............................|snippy-functions|
    ADVANCED SETUP.......................|snippy-advanced-setup|
    LICENSE..............................|snippy-license|


==============================================================================
INTRODUCTION                                             *snippy-introduction*

Snippy is a lua-based snippets plugin for Neovim.


==============================================================================
USAGE                                                           *snippy-usage*

                                                          *snippy-usage-setup*

Snippy includes an optional |snippy.setup()| function for you to quickly
configure it according to your needs. See the |snippy-options| section for
information on the available options.

                                                       *snippy-usage-mappings*

Snippy comes with no mappings activated by default. So you'll want to define
some, probably. You can also map keys by using the `mappings` setup option
(recommended, see |snippy-options|).

For example, to use `<Tab>` to expand and jump forward, `<S-Tab>` to jump back:
>
    imap <expr> <Tab>   snippy#can_expand_or_advance() ? '<Plug>(snippy)'          : '<Tab>'
    imap <expr> <S-Tab> snippy#can_jump(-1)            ? '<Plug>(snippy-previous)' : '<S-Tab>'
    smap <expr> <Tab>   snippy#can_jump(1)             ? '<Plug>(snippy-next)'     : '<Tab>'
    smap <expr> <S-Tab> snippy#can_jump(-1)            ? '<Plug>(snippy-previous)' : '<S-Tab>'
<
You can optionally define mappings for cutting the currently selected text, to
be used later by the `$VISUAL` or `$TM_SELECTED_TEXT` variables:
>
    nmap g<Tab> <Plug>(snippy-cut-text)
    xmap <Tab>  <Plug>(snippy-cut-text)
<
When mapping from Lua using |nvim_set_keymap()|, you can use
|snippy.can_expand()| and |snippy.can_jump()| functions. The Vimscript
functions above are just convenience wrappings around those.

                                                       *snippy-usage-snippets*

By default every `snippets` directory in |runtimepath| will be searched for
snippets. Snippy uses the same format as SnipMate, so the following patterns
are accepted:
    - snippets/{filetype}.snippets
    - snippets/{filetype}_{name}.snippets
    - snippets/{filetype}/{name}.snippets
    - snippets/{filetype}.snippet
    - snippets/{filetype}/{trigger}.snippet
    - snippets/{filetype}/{trigger}/{description}.snippet

When scanning the |runtimepath| for snippets, directories coming from
plugins/packages will have lower priority than other directories.
Also project-local snippets will be loaded, if found in `.snippets/` in the
current working directory.

From lower to higher priority:

1. snippets from packages or plugins
2. snippets from other locations (eg. ~/.local/share/nvim/site/snippets)
3. snippets in 'after' directories
4. snippets in directories from |snippy-options|
5. project-local snippets (`./.snippets/` directory)

Files with the `.snippet` extension contain a single snippet each, whereas
files with the `.snippets` extension can be used to declare multiple snippets.

See |snippy-snipmate-syntax|.

                                                         *snippy-usage-scopes*

Scopes are the term used in Snippy to refer to a group of snippets that should
be loaded for a filetype. They are generally named after the filetype they
were created for. You can, however, give them any name you want, as long as
you tell Snippy to load them for a filetype using the `scopes` setup option.

The global scope is identified by an underscore (`_`). Snippets in the global
scope will be loaded for every filetype.


==============================================================================
SNIPPET SYNTAX                                         *snippy-snippet-syntax*

Snippy should be compatible with the full LSP snippet syntax, which in turn is
based on the original TextMate syntax. Additionally, the SnipMate syntax is
supported for compatibility.

Currently the parser for a particular snippet is chosen based on the source
the snippet was loaded from. If it was loaded from a SnipMate file, the
SnipMate-style parser will be used. The default behavior is to parse using the
LSP syntax parser.

------------------------------------------------------------------------------
LSP Snippet Syntax                                         *snippy-lsp-syntax*

The full LSP snippet syntax can be found at
https://github.com/Microsoft/language-server-protocol/blob/main/snippetSyntax.md.

The only point where Snippy deviates from the LSP syntax in in the handling of
transformations. Transformations are very complex and require support for
Javascript regex parsing. Instead we support Vim-based regular expressions and
a simplified format, which see |snippy-snipmate-transform| below for more
details.

Note: the LSP syntax is only supported when expanding LSP provided completion
items. When expanding snippets defined in `.snippet(s)` files, SnipMate's
syntax is used instead.


------------------------------------------------------------------------------
SnipMate's Syntax                                     *snippy-snipmate-syntax*

SnipMate syntax is also based on the TextMate syntax and so largely compatible
with the LSP syntax. A basic SniMate-style snippet looks like this:
>
    for (${1:i} = 0; $1 < ${2:limit}; $1++) {
        System.out.println($1);
    }
<
`.snippets` files can declare multiple snippets the following format:
>
    snippet trigger1 "Description for snippet 1" [options]
        This is the first line.
        This is the second line.
    snippet trigger2 "Description for snippet 2" [options]
        This is the first line.
        This is the second line.
<                                                    *snippy-snipmate-options*

The `description` is optional, and could be used by completion plugins.

The `options` control the behavior of the expansion of the snippet and are
optional. Currently supported are the following:

    `w  ` Word boundary: the word expands only when the trigger is on a word
        boundary. This is the default behavior and can be omitted.

    `i  ` In-word expansion: the snippet expands even if the trigger is only
        part of the word, up to the cursor.

    `b  ` Beginning of line: the snippet is only expanded if its trigger is
        the first word on the line, only preceeded by whitespace.

    `^  ` Column 1: as above, but also without preceding whitespace.

    `#  ` Beginning of file: the snippet can expand only at the first column
        of the first line.

    `_  ` Ensure empty lines: ensure a number of empty lines after the snippet
        equal to the number of underscores in the snippet options.

                                                   *snippy-snipmate-indenting*

Default indentation in snippet definitions is with tabs, and it's recommended
you leave it that way: when inserted in a buffer that uses spaces for
indentation, it will be changed automatically at snippet insertion. So your
snippets will use tabs if the file uses tabs, or spaces otherwise.

                                                    *snippy-snipmate-tabstops*

In addition to TextMate-style tabstops (`$1`, `${1}`, etc), simple tabstops
can also be written with `___`. They are numberless and processed after
numbered tabstops/placeholders, in the order they're found.
The `vvv` tabstop can replace `$VISUAL` as well.

For example: >
    if ___ then
        vvv
    end
<
is equivalent to: >
    if $1 then
        $VISUAL
    end
<
It's also possible to have named placeholders, with a default value: >
    if {condition:test} then
        print({condition})
    end
<                                                        *snippy-snipmate-eval*

This syntax also allows Vim code to be evaluated inside backticks (``):
>
    Current date is `strftime('%c')`
<
If the first character inside the backticks is a `!`, |system()| is used
instead of |eval()|, and the result of the system command will be inserted:
>
    Directory listing:
    `!ls`
<                                                  *snippy-snipmate-transform*

Transformations are supported for tabstops and variables, with the caveat that
Vim regular expressions are to be used instead of Javascript ones. The
`format` part is also a Vim regular substitution pattern. For instance:
>
    This ${1:word} will be changed to uppercase: ${1/.*/\U\0/g}
<
Will result in:
>
    This word will be changed to uppercase: WORD
<
                                                      *snippy-snipmate-visual*

The special variable `$VISUAL` holds text previously selected and stored using
the `snippy.cut_text()` function or the `<plug>(snippy-cut-text)` mapping.
This is equivalent to the `$TM_SELECTED_TEXT` variable defined by the
TextMate/LSP syntax.

A `$VISUAL` variable is replaced by a numberless placeholder, if it's empty.



==============================================================================
OPTIONS                                                       *snippy-options*

This plugin can be configured by passing a dictionary to the lua function
`snippy.setup(...)`.

Example setup:
>
    local snippy = require('snippy')

    snippy.setup({
        snippet_dirs = '~/snippets',
        hl_group = 'Search',
        mappings = {
            is = {
                ["<Tab>"] = "expand_or_advance",
                ["<S-Tab>"] = "previous",
            },
            nx = {
                ["<leader>x"] = "cut_text",
            },
        },
    })
<
The following options are supported:

snippet_dirs ~
    A comma-separated (if a `String`) list of directories containing snippets.
    Snippets must be placed in the top-level directory, with no nested
    `snippets/` subfolder.
        Type: `String` or `List`
        Default: vim.api.nvim_list_runtime_paths()

hl_group ~
    Highlight group used for placeholders.
        Type: `String`
        Default: nil

choice_delay~
    Defines the delay in milliseconds before the choice menu is displayed.
        Type: `Number`
        Default: 100

mappings~
    A table for easily mapping keys in Lua. Each key must be a table or a
    string with one or more mode identifier characters (see |map-listing|).
    The values should be tables mapping LHS |key-notation|s to RHS values.
    RHS can be a string, or even a function (see |snippy-advanced-setup|).
        Type: `Table`
        Default: {}
        Example: >

        mappings = {
            -- Mappings for insert and select mode
            is = {
                ["<Tab>"] = "expand_or_advance",
                ...
            }
            -- Mappings for visual mode
            x = {
                ["<Tab>"] = "cut_text",
                ...
            }
        }
<
    Valid string RHS values:

        "expand_or_advance"~
        "expand"~
        "next"~
        "previous"~
        "cut_text"~


scopes ~
    A table with filetypes as keys. Each value must be a table containing a
    list of scopes or a function that receives the calculated list of scopes
    for the current buffer and should return a new (possibly modified) list of
    scopes.
        Type: `Table`
        Default: nil
        Example: >

        scopes = {
            -- Load busted.snippets for *_spec.lua
            lua = function(scopes)
                if vim.api.nvim_buf_get_name(0):find('_spec.lua$') then
                    table.insert(scopes, 'busted')
                end
                return scopes
            end,
            -- Load HTML and Javascript snippets for PHP
            php = { '_', 'php', 'html', 'javascript' },
        }
<
==============================================================================
BUFFER OPTIONS                                         *snippy-buffer-options*

It's also possible to define options for a specific buffer using the
|snippy.setup_buffer()| function. Example:
>
    autocmd BufRead,BufNewFile *_spec.lua lua require('snippy').setup_buffer(0,
        \ { scopes = { '_', 'lua', 'busted' } })
<
The following options are supported:

scopes ~
    Can be set to a table containing a list of scopes or a function that
    receives the calculated list of scopes for the current buffer and should
    return a new (possibly modified) list of scopes.
        Type: ||Table|
        Default: nil


==============================================================================
COMMANDS                                                     *snippy-commands*

:Snippets[!] {file}                                                 *:Snippets*

    Opens an existing snippet file in a new split. Completion available.

    Without arguments, will open the most obvious location, eg. for lua: >
        ~/.local/share/nvim/site/snippets/lua.snippets
<
    With <bang> and no arguments, it will open a project-local snippets file,
    eg: >
        ./.snippets/lua.snippets
<
:SnippetsReload                                               *:SnippetsReload*

    Invalidates current cache, allowing newly added/edited snippets to be
    loaded. Normally not necessary, because cache is invalidated automatically
    on write when a `snippets` file is updated.


==============================================================================
FUNCTIONS                                                   *snippy-functions*


`snippy.setup`({options})                                       *snippy.setup()*

    Set initial configuration for the plugin. See also |snippy-options|.


`snippy.setup_buffer`({bufnr}, {options})                *snippy.setup_buffer()*

    Set configuration for the current buffer. See also
    |snippy-buffer-options|.


`snippy.can_expand`()                                      *snippy.can_expand()*

    Checks if a snippet can be expanded at the current location.


`snippy.can_jump`({direction})                               *snippy.can_jump()*

    Checks if a jump in the indicated direction can be performed at the
    current location.

    {direction} is a integer. You can pass `-1` or  `1` to mean backward or
    forward respectively.


`snippy.can_expand_or_advance`()                *snippy.can_expand_or_advance()*

    Checks if a snippet can be expanded or a forward jump can be performed at
    the current location.


`snippy.expand`()                                              *snippy.expand()*

    Expands the current trigger at the current location.


`snippy.expand_or_next`()                              *snippy.expand_or_next()*

    Expands the current trigger if possible. Otherwise jumps to the next
    available tab stop.


`snippy.next`()                                                  *snippy.next()*

    Jumps to the next available tab stop.


`snippy.previous`()                                          *snippy.previous()*

    Jumps to the previous available tab stop.


`snippy.expand_snippet`({snippet}[, {trigger}])        *snippy.expand_snippet()*

    Expands {snippet} with {trigger} at the current cursor position.

    {trigger} is optional.


`snippy.cut_text`({mode}, {visual})                          *snippy.cut_text()*

    Cuts and stores the currently selected text, to be used later.

    {mode} is a string returned by |mode()|.

    {visual} indicates whether the function was called from visual mode.


`snippy.is_active`()                                        *snippy.is_active()*

    Checks whether there is an active snippet.


`snippy.get_completion_items`()                  *snippy.get_completion_items()*

    Returns a list of all completion items available in the current scope.


`snippy.complete`()                                          *snippy.complete()*

    Shows a basic completion menu at the current location.


`snippy.complete_done`()                                *snippy.complete_done()*

    To be called when the |CompleteDone| |autocmd| is fired, expanding any snippet
    present in the |v:completed_item| variable. Example:
>
    autocmd CompleteDone * lua require 'snippy'.complete_done()
<

-------------------------------------------------------------------------------

Some Vimscript |autoload| functions are also provided for convenience,
specially for mappings:


`snippy#can_expand`()                                      *snippy#can_expand()*

    See |snippy.can_expand()|.


`snippy#can_jump`({direction})                               *snippy#can_jump()*

    See |snippy.can_jump()|.


`snippy#can_expand_or_advance`()                *snippy#can_expand_or_advance()*

    See |snippy.can_expand_or_advance()|.



==============================================================================
ADVANCED SETUP                                         *snippy-advanced-setup*

This is an example of setup that uses functions. Some additional steps could
be required if you use a completion plugin.
>
    vim.cmd('packadd nvim-snippy')

    local ok, snippy = pcall(require, 'snippy')
    if not ok then return end

    local fwd = (vim.api.nvim_replace_termcodes('<C-n>', true, true, true))
    local bwd = (vim.api.nvim_replace_termcodes('<C-p>', true, true, true))
    local tab = (vim.api.nvim_replace_termcodes('<Tab>', true, true, true))

    local feedkeys = vim.api.nvim_feedkeys

    snippy.setup {
        hl_group = 'WarningMsg',
        mappings = {
            i = {
                ["<Tab>"] = function()
                    if snippy.can_expand() then
                        snippy.expand()
                    elseif snippy.can_jump(1) then
                        snippy.next()
                    elseif vim.fn.pumvisible() == 1 then
                        feedkeys(fwd, '', true)
                    else
                        feedkeys(tab, '', true)
                    end
                end,
                ["<S-Tab>"] = function()
                    if snippy.can_jump(-1) then
                        snippy.previous()
                    elseif vim.fn.pumvisible() == 1 then
                        feedkeys(bwd, '', true)
                    else
                        feedkeys(tab, '', true)
                    end
                end,
            },
            s = {
                ["<Tab>"] = "expand_or_advance",
                ["<S-Tab>"] = "previous",
            },
            nx = {
                ["<leader>x"] = "cut_text",
            },
        },
    }
<


==============================================================================
LICENCE                                                       *snippy-license*

Snippy is licensed under the MIT license.


==============================================================================
vim:tw=78:et:ts=4:sw=4:ft=help:norl:
